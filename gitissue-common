#!/bin/sh

function puts_step() {
    echo "-----> $@"
}

function puts_warn() {
    echo " !     $@" >&2
}

function fail() {
    puts_warn "$@"
    exit 1
}

# Breaks a multiline string into 80 char width segments, indented n characters.
# String formatting in shell at its best.
function format() {
  local string="$1"
  local indent="$2"
  local text_width=`expr 72 - $indent`
  local indentation="$(head -c $indent 2>/dev/null < /dev/zero | tr '\0' ' ')"
  echo $string | fmt -sw $text_width | sed "s/^/$indentation/"
}

# Executes a command using Jira's CLI. This will automatically read your server
# and authentication configuration from your .gitconfig:
#
#   [jira]
#     user = [username]
#     server = [server]
function jira_cmd() {
    if [ -z "$JIRA_LOGIN_TOKEN" ]; then
        # This may not work if the result of jira_cmd is stored as a variable.
        # There must be a way around this.
        login_jira
    fi
    $JIRA_CLI --server "$JIRA_SERVER" --login "$JIRA_LOGIN_TOKEN" --password dummy "$@"
}

# Attempts to login to Jira and store the token for reuse.
function login_jira() {
    if [ -z "$JIRA_SERVER" ]; then
        load_jira_config
    fi
    JIRA_LOGIN_TOKEN=$(get_cache login_token)

    if [ -z "$JIRA_LOGIN_TOKEN" ]; then
        local stored_password=$(get_stored_password)
        if [ -n "$stored_password" ]; then
            password="$stored_password"
        else
            echo "Enter your Jira Password: \c"
            read -s password
            echo
        fi
        puts_step "Logging into Jira as '$JIRA_USER'"
        JIRA_LOGIN_TOKEN=$($JIRA_CLI --server $JIRA_SERVER --user $JIRA_USER --password $password -a login)
        set_cache login_token "$JIRA_LOGIN_TOKEN"
    else
        puts_step "Logging into Jira using token"
    fi
}

# Reads the Jira configuration from your .gitconfig file.
function load_jira_config() {
    JIRA_SERVER=$(_get_git_config jira.server)
    JIRA_USER=$(_get_git_config jira.user)

    if [ -z "$JIRA_SERVER" ] || [ -z "$JIRA_USER" ]; then
        _show_jira_config_help
        exit 1
    fi

    JIRA_CLI=$(_get_git_config jira.cli "jira")
    JIRA_DEVELOPMENT_BRANCH=$(_get_git_config jiraflow.development.branch "development")
    JIRA_DEVELOPMENT_REMOTE=$(_get_git_config jiraflow.development.remote "origin")
    JIRA_MASTER_BRANCH=$(_get_git_config jiraflow.master.branch "master")
    JIRA_MASTER_REMOTE=$(_get_git_config jiraflow.master.remote "origin")
}

function _get_git_config() {
    local key="$1"
    local default="$2"
    echo $(git config $key || echo $2)
}

function _show_jira_config_help() {
    cat <<JIRA_CONFIG
git-issue requires Jira API configuration to be set in your .gitconfig:

  [jira]
    server = <Jira server URL>
    user = <your username>

And optionally:

  [jira]
    cli = <path to Jira CLI>
JIRA_CONFIG
}

# Checks if the given string looks like a valid Jira issue key, failing fast
# if it does not.
function check_jira_key() {
	test -n `echo "$1" | grep ^[A-Z]+-[0-9]+$` || fail "'$1' is not a vaild Jira issue key"
}

# Echos the summary for the given Jira issue key. This will fail if the
# issue does not exist.
function get_jira_summary() {
    local jira_key="$1"
    local jira_summary="$(jira_cmd -a getFieldValue --field Summary --issue $jira_key 2>/dev/null | sed -e '1d')"
    test -n "$jira_summary" || fail "Issue '$jira_key' does not exist"
    echo "$jira_summary"
}

# Echos the description for the given Jira issue key. This will fail if the
# issue does not exist.
function get_jira_description() {
    local jira_key="$1"
    local jira_description="$(jira_cmd -a getFieldValue --field Description --issue $jira_key 2>/dev/null | sed -e '1d')"
    test -n "$jira_description" || fail "Issue '$jira_key' does not exist"
    echo "$jira_description"
}

# Echos the shorthand commit logs for all commits in issue_branch
# not in merge_branch
function get_subcommit_messages() {
  local issue_branch=$1
  local merge_branch=$2
  echo "$(git log $issue_branch --not $merge_branch --oneline)"
}

# Cats a pretty printed multi-line commit message
# Uses information from the jira issue and the git log
function compose_commit_message() {
  local jira_key="$1"
  local issue_branch="$2"
  local merge_branch="$3"
  local summary="$(get_jira_summary $jira_key)"
  local header="Resolved Issue $jira_key: $summary"
  local description="$(get_jira_description $jira_key)"
  local subcommit_messages="$(get_subcommit_messages $issue_branch $merge_branch)"
  cat <<MSG
$(format "$header" 0)

$(format "$description" 0)

Subcommit(s):
$(format "$subcommit_messages" 2)
MSG
}

function git_local_branches() {
    git branch --no-color | sed "s/^[* ] //"
}

function git_current_branch() {
    git branch --no-color | grep "^\* " | grep -v "no branch" | sed "s/^* //g"
}

function git_issue_branch() {
    echo "$(git_local_branches)" | grep "$1/"
}

# Attempts to get cached data from the GITISSUE_CACHE_DIR.
#
# Usage:
#   data=$(get_cache some_key)
function get_cache() {
    local key="$1"
    local file="$GITISSUE_CACHE_DIR/$key"
    if [ $(find $file -mmin -$GITISSUE_CACHE_EXPIRATION) ]; then
        cat "$file"
    fi
}

# Stores the given data to a file in the GITISSUE_CACHE_DIR
#
# Usage:
#   set_cache some_key "$some_data"
function set_cache() {
    local key="$1"
    local value="$2"
    mkdir -p "$GITISSUE_CACHE_DIR"
    echo "$2" > "$GITISSUE_CACHE_DIR/$key"
}

# Checks the .netrc file for stored password
#
# Usage:
#   PASSWORD=$(get_stored_password)
function get_stored_password() {
    if [ -z "$JIRA_SERVER" ] || [ -z "$JIRA_USER" ]; then
        load_jira_config
    fi

    local netrc_path="$HOME/.netrc"
    local machine=$(_parse_machine_name "$JIRA_SERVER")
    local section=$(cat "$netrc_path" | grep -A 2 "$machine")

    if [ -n "$section" ]; then
        local login=$(_parse_setting_from_section "$section" login)
        if [[ "$login" == "$JIRA_USER" ]]; then
            _parse_setting_from_section "$section" password
        fi
    fi
}

function _parse_setting_from_section() {
    local section="$1"
    local setting="$2"
    echo "$section" | awk "{if (\$1==\"$setting\") print \$2}"
}

function _parse_machine_name() {
    local url="$1"
    echo "$url" | sed -e "s!\http\(s\)\{0,1\}://*!!g"
}
